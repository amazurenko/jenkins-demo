version: '2'
services:

  docker-in-docker:
    image: docker:dind
    privileged: true
    expose:
      - 2375

  jenkins:
    build:
      context: .
      dockerfile: jenkins.Dockerfile
    container_name: jenkins
    user: root
    restart: always
    environment:
      DOCKER_HOST: tcp://docker-in-docker:2375
    group_add:
      - 999                    # "docker" group id
      - 501
    expose:
      - "8080"
    ports:
      - "127.0.0.1:50000:50000"
      - 8080:8080
      # JMX/RMI Ports
#      - "0.0.0.0:12345:12345"
#      - "0.0.0.0:12346:12346"
    volumes:
      - ${PWD}/jenkins/master:${PWD}/jenkins/master

      # for managing Docker daemon inside Docker
      - /var/run/docker.sock:/var/run/docker.sock:rw
    environment:
      - HOME=${PWD}/jenkins/master
      - JENKINS_HOME=${PWD}/jenkins/master
      - JAVA_OPTS=
          -Djenkins.install.runSetupWizard=false
          -Djava.awt.headless=true
          -Dhudson.plugins.git.GitSCM.verbose=true
          -XX:+DisableExplicitGC
          -Xms1000m
          -Xmx3000m
          -Dorg.apache.commons.jelly.tags.fmt.timeZone=Europe/London
          -Duser.timezone=Europe/London
          -Dhttps.protocols=TLSv1.2
          -Dorg.eclipse.jetty.server.Request.maxFormContentSize=5000000
          -Dhudson.plugins.parameterizedtrigger.ProjectSpecificParametersActionFactory.compatibility_mode=true
          -Dpermissive-script-security.enabled=true
          -XX:MaxMetaspaceSize=1g
          -XX:+CMSClassUnloadingEnabled
          -XX:+UseConcMarkSweepGC
#          -Dhttps.protocols=TLSv1.2
#          -Djava.rmi.server.hostname=jenkins
#          -Dcom.sun.management.jmxremote.local.only=false
#          -Dcom.sun.management.jmxremote.port=12345
#          -Dcom.sun.management.jmxremote.rmi.port=12346
#          -Dcom.sun.management.jmxremote.authenticate=false
#          -Dcom.sun.management.jmxremote.ssl=false
    logging:
      driver: json-file #syslog #journald
      options:
        tag: jenkins
    ulimits:
      nproc: 65535
      nofile:
        soft: 20000
        hard: 40000

  portainer:
    restart: always
    image: "portainer/portainer"
    ports:
      - 9001:9000
    volumes:
      - ./portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
    logging:
      driver: json-file #syslog
      options:
        tag: portainer

  sonar:
    depends_on: ['sonardb']
    environment: ['SONARQUBE_JDBC_USERNAME=sonar', 'SONARQUBE_JDBC_PASSWORD=hDeQoAA3X3', 'SONARQUBE_JDBC_URL=jdbc:mysql://sonardb:3306/sonar?useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true']
    image: sonarqube:6.5
    logging: {'driver': 'json-file', 'options': {'tag': 'docker-sonar'}}
    ports: ['9000:9000']
    restart: always
    volumes: ['./sonar/sonarqube_conf:/opt/sonarqube/conf', './sonar/sonarqube_data:/opt/sonarqube/data', './sonar/sonarqube_extensions:/opt/sonarqube/extensions', './sonar/sonarqube_bundled-plugins:/opt/sonarqube/lib/bundled-plugins']


  sonardb:
    environment: ['MYSQL_ROOT_PASSWORD=EmA8yy2FIK', 'MYSQL_DATABASE=sonar', 'MYSQL_USER=sonar', 'MYSQL_PASSWORD=hDeQoAA3X3']
    image: mysql:5.7
    logging: {'driver': 'json-file', 'options': {'tag': 'docker-sonardb'}}
    ports: ['3306:3306']
    restart: always
    volumes: ['./sonar/mysql-data:/var/lib/mysql']

  nginx:
    restart: always
    image: nginx:alpine
    ports:
      - "80:80"
        #      - "443:443"
    depends_on:
      - portainer
      - nexus
      - sonar
      - jenkins
    volumes:
      - "./nginx/nginx.conf:/etc/nginx/conf.d/default.conf"
#      - "./nginx/ssl:/etc/nginx/ssl"

  nexus:
    restart: always
    image: "sbeliakou/nexus:3.12.0"
    expose:
      - "8081"
      - "8085"
      - "6566"
      - "6565"
    ports:
      - 0.0.0.0:8081:8081      
      - "0.0.0.0:6566:6566"
    volumes:
      - ./nexus-data:/nexus-data
        #      - /var/server/config/nexus-config/org.apache.karaf.features.cfg:/opt/sonatype/nexus/etc/karaf/org.apache.karaf.features.cfg
        #      - /var/server/config/nexus-config/org.apache.karaf.management.cfg:/opt/sonatype/nexus/etc/karaf/org.apache.karaf.management.cfg
    environment:
      - JAVA_MAX_HEAP=3000m
      - JAVA_MIN_HEAP=1200m

    logging:
      driver: json-file
      options:
        tag: nexus
    ulimits:
      nproc: 65535
      nofile:
        soft: 20000
        hard: 40000

        
